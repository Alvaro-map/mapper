# This file is part of OpenOrienteering.

# Copyright 2019 Kai Pastor
#
# Redistribution and use is allowed according to the terms of the BSD license:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# 1. Redistributions of source code must retain the copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products 
#    derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

parameters:
  buildCommand: make -j3
  cmakeArgs: '-DCMAKE_BUILD_TYPE=Release'
  imageName: ''
  targetSuffix: ''
  toolchainTargets: 'default-toolchain'
  mode: ''


steps:
- task: DownloadPipelineArtifact@0
  inputs:
    pipelineId: $(openorienteering.superbuild.pipelineId)
    artifactName: 'superbuild-${{ parameters.imageName }}${{ parameters.targetSuffix }}'
    targetPath: $(SUPERBUILD_INSTALL_DIR)
  displayName: 'Download superbuild artifacts'

- ${{ if startsWith(parameters.imageName, 'ubuntu') }}:
  - bash: |
      set -x
      set -e
      chmod +x $(SUPERBUILD_INSTALL_DIR)/bin/*
      sed -e 's,@SOURCE_DIR@,$(Build.SourcesDirectory),' ci/filter-stderr.sed.in \
        > filter-stderr.sed
      sudo apt-get update
      sudo apt-get install doxygen graphviz python-lxml
      case "${{ parameters.mode }}${{ parameters.targetSuffix }}" in
        *-x86_64-w64-mingw32)
          sudo apt-get install g++-mingw-w64-x86-64
          chmod +x $(SUPERBUILD_INSTALL_DIR)/x86_64-w64-mingw32/toolchain/bin/*
          ;;
        clazy*)
          CLAZY_VERSION=1.5
          CLAZY_IMAGE=Clazy-x86_64-${CLAZY_VERSION}.AppImage
          curl https://downloads.kdab.com/clazy/${CLAZY_VERSION}/${CLAZY_IMAGE} -O
          curl https://downloads.kdab.com/clazy/${CLAZY_VERSION}/sums.txt -O
          grep --no-filename $(sha1sum ${CLAZY_IMAGE}) sums.txt
          sudo cp ${CLAZY_IMAGE} /usr/local/bin/clazy
          sudo chmod +x /usr/local/bin/clazy
          echo "##vso[task.setVariable variable=CXX]/usr/local/bin/clazy"
          ;;
        gcov*)
          sudo apt-get install g++ libgcc-5-dev python-pip
          sudo pip install gcovr
          sed -i -e "/autosave_t/s,MANUAL,," test/CMakeLists.txt
          ;;
      esac
    displayName: 'Prepare build tools'

- ${{ if startsWith(parameters.imageName, 'macos') }}:
  - bash: |
      set -x
      set -e
      chmod +x $(SUPERBUILD_INSTALL_DIR)/bin/*
      sed -e 's,@SOURCE_DIR@,$(Build.SourcesDirectory),' ci/filter-stderr.sed.in \
        > filter-stderr.sed
      sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer
      pip install lxml
      case "${{ parameters.mode }}${{ parameters.targetSuffix }}" in
        *-arm-linux-androideabi)
          chmod +x $(SUPERBUILD_INSTALL_DIR)/arm-linux-androideabi/toolchain/bin/*
          ;;
      esac
    displayName: 'Prepare build tools'

- bash: |
    set -x
    set -e
    git clone --branch master --depth 1 https://github.com/openorienteering/superbuild.git
    cp $(Build.SourcesDirectory)/ci/openorienteering-mapper-ci.cmake superbuild/
  displayName: 'Checkout superbuild source'

- task: CMake@1
  inputs:
    workingDirectory: 'build'
    cmakeArgs: >
      $(Build.SourcesDirectory)/superbuild
      "-DSUPERBUILD_DISABLE_DEPENDENCIES=TRUE"
      -Ddefault_INSTALL_DIR=
      -Ddefault_INSTALL_PREFIX=$(SUPERBUILD_INSTALL_DIR)
      -Ddefault_TOOLCHAIN_DIR=$(SUPERBUILD_INSTALL_DIR)/toolchain
      "-DMapper_CI_GIT_REPOSITORY=$(Build.SourcesDirectory)"
      "-DMapper_CI_GIT_TAG=$(Build.SourceVersion)"
      "-DMapper_CI_VERSION_DISPLAY=$(Build.SourceBranch) $(Build.SourceVersion)"
      "-DMapper_CI_QT_VERSION=$(openorienteering.mapper.qt.version)"
      "-DMapper_CI_LICENSING_PROVIDER=$(openorienteering.mapper.licensing.provider)"
      "-DMapper_CI_ENABLE_POSITIONING=$(openorienteering.mapper.positioning.enabled)"
      ${{ parameters.cmakeArgs }}
  displayName: 'Configure'
  
- bash: |
    set -x
    #
    cd $(Build.SourcesDirectory)/build
    ${{ parameters.buildCommand }} \
      ${{ parameters.toolchainTargets }}
  displayName: 'Build toolchain'

- bash: |
    set -x
    #
    cd $(Build.SourcesDirectory)/build
    ${{ parameters.buildCommand }} \
      toolchain-info${{ parameters.targetSuffix}} \
      2> >(sed -f $(Build.SourcesDirectory)/filter-stderr.sed) \
      || exit 1
    ${{ parameters.buildCommand }} \
      openorienteering-mapper-ci${{ parameters.targetSuffix }} \
      2> >(sed -f $(Build.SourcesDirectory)/filter-stderr.sed)
    #
    cd $(Build.SourcesDirectory)
    TARGET=`echo default${{ parameters.targetSuffix }} | sed -e 's,^default-,,'`
    TEST_RESULTS=build/${TARGET}/openorienteering-mapper-ci/Testing
    if [ -f "${TEST_RESULTS}/TAG" ]; then
      echo "##vso[task.setVariable variable=TEST_RESULTS]$(Build.SourcesDirectory)/${TEST_RESULTS}"
    fi
    #
    cd $(Build.SourcesDirectory)
    mkdir output
    case "${{ parameters.imageName }}${{ parameters.targetSuffix }}" in
      ubuntu-*-mingw32)
        cp build/${TARGET}/openorienteering-mapper-ci/OpenOrienteering-Mapper-*.zip output/ && \
        echo "##vso[task.setVariable variable=ARTIFACT_NAME]Mapper${{ parameters.targetSuffix }}"
        ;;
      ubuntu-*)
        cp build/default/openorienteering-mapper-ci/OpenOrienteering-Mapper-*.deb output/ && \
        echo "##vso[task.setVariable variable=ARTIFACT_NAME]Mapper-${{ parameters.imageName }}"
        ;;
      macos-*-*android*)
        cp build/${TARGET}/openorienteering-mapper-ci/packaging/Mapper/install/build/outputs/apk/*/*.apk output/ && \
        echo "##vso[task.setVariable variable=ARTIFACT_NAME]Mapper${{ parameters.targetSuffix }}"
        ;;
      macos-*)
        cp build/default/openorienteering-mapper-ci/OpenOrienteering-Mapper-*.dmg output/ && \
        echo "##vso[task.setVariable variable=ARTIFACT_NAME]Mapper-${{ parameters.imageName }}"
        ;;
    esac
  env:
    CTEST_OUTPUT_ON_FAILURE: 1
    ${{ if eq(parameters.mode, 'clazy') }}:
      CLAZY_CHECKS: 'level0,level1,no-rule-of-two-soft,no-const-signal-or-slot,no-fully-qualified-moc-types'
      CLAZY_IGNORE_DIRS: '.*printsupport.qt-5.*'
      CLAZY_NO_WERROR: 1
    ${{ if eq(parameters.mode, 'gcov') }}:
      CC: gcc
      CFLAGS: -fprofile-arcs -ftest-coverage
      CXX: g++
      CXXFLAGS: -fprofile-arcs -ftest-coverage
      LDFLAGS: -fuse-ld=gold
  displayName: 'Build Mapper'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'cTest'
    testResultsFiles: '*/Test.xml'
    searchFolder: '$(TEST_RESULTS)'
    buildPlatform: ${{ parameters.imageName }}
  condition: variables.TEST_RESULTS
  displayName: 'Publish test results'

- ${{ if eq(parameters.mode, 'gcov') }}:
  - bash: |
      set -x
      #
      cd $(Build.SourcesDirectory)
      mkdir coverage
      # Run gcovr from source dir, cf. https://github.com/gcovr/gcovr/issues/64
      cd build/source/openorienteering-mapper-ci
      GCOVR_ARGS="\
        --root=$(Build.SourcesDirectory)/build/source/openorienteering-mapper-ci \
        --filter=src/ \
        --filter=test/ \
        --object-directory=$(TEST_RESULTS)/CoverageInfo \
        --use-gcov-files \
        --keep \
        --print-summary"
      gcovr --xml --output $(Build.SourcesDirectory)/coverage/coverage.xml ${GCOVR_ARGS}
    displayName: 'Process code coverage results'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/coverage/coverage.xml'
    displayName: 'Publish code coverage results'

- ${{ if ne(parameters.mode, 'gcov') }}:
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: '$(ARTIFACT_NAME)'
      targetPath: $(Build.SourcesDirectory)/output
    condition: variables.ARTIFACT_NAME
